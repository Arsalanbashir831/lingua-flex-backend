# Generated by Django 5.2.4 on 2025-07-29 10:26

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('accounts', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='LearningContext',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('category', models.CharField(choices=[('daily_conversation', 'Daily Conversation'), ('business', 'Business'), ('academic', 'Academic'), ('travel', 'Travel'), ('social', 'Social Interactions')], max_length=50)),
                ('difficulty_level', models.CharField(choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced')], max_length=20)),
                ('vocabulary', models.JSONField(default=list)),
                ('suggested_responses', models.JSONField(default=list)),
                ('is_active', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='AISession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.DateTimeField(auto_now_add=True)),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('duration', models.DurationField(blank=True, null=True)),
                ('feedback', models.TextField(blank=True, null=True)),
                ('performance_metrics', models.JSONField(null=True)),
                ('pronunciation_score', models.FloatField(null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('fluency_score', models.FloatField(null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('vocabulary_score', models.FloatField(null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('grammar_score', models.FloatField(null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('notes', models.TextField(blank=True)),
                ('is_completed', models.BooleanField(default=False)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.userprofile')),
                ('context', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lessons.learningcontext')),
            ],
        ),
        migrations.CreateModel(
            name='Conversation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('user_input', models.TextField()),
                ('ai_response', models.TextField()),
                ('user_audio_url', models.URLField(blank=True)),
                ('ai_audio_url', models.URLField(blank=True)),
                ('emotion_metrics', models.JSONField(null=True)),
                ('pronunciation_feedback', models.JSONField(null=True)),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='conversations', to='lessons.aisession')),
            ],
        ),
        migrations.CreateModel(
            name='VoiceAvatar',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('accent', models.CharField(max_length=50)),
                ('voice_id', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('gender', models.CharField(choices=[('male', 'Male'), ('female', 'Female')], max_length=20)),
                ('age_range', models.CharField(choices=[('child', 'Child'), ('young', 'Young'), ('adult', 'Adult'), ('senior', 'Senior')], max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('sample_audio_url', models.URLField(blank=True)),
                ('language', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.language')),
            ],
        ),
        migrations.AddField(
            model_name='aisession',
            name='voice_avatar',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lessons.voiceavatar'),
        ),
        migrations.CreateModel(
            name='LearningProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('difficulty_level', models.CharField(choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced')], max_length=20)),
                ('sessions_completed', models.IntegerField(default=0)),
                ('total_duration', models.DurationField(default=0)),
                ('average_score', models.FloatField(null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('mastered_vocabulary', models.JSONField(default=list)),
                ('areas_for_improvement', models.JSONField(default=list)),
                ('last_session_date', models.DateTimeField(null=True)),
                ('context', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lessons.learningcontext')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.userprofile')),
            ],
            options={
                'unique_together': {('student', 'context', 'difficulty_level')},
            },
        ),
    ]
