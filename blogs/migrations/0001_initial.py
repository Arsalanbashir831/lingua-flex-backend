# Generated by Django 5.2.4 on 2025-08-19 06:49

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('accounts', '0010_alter_transcription_field_type'),
    ]

    operations = [
        migrations.CreateModel(
            name='BlogCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name_plural': 'Blog Categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Blog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Blog title', max_length=200)),
                ('slug', models.SlugField(blank=True, help_text='URL-friendly version of title', max_length=250, unique=True)),
                ('content', models.TextField(help_text='Main blog content')),
                ('thumbnail', models.CharField(blank=True, help_text='URL or path to thumbnail image', max_length=500, null=True)),
                ('tags', models.JSONField(blank=True, default=list, help_text='List of tags for the blog')),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('published', 'Published'), ('archived', 'Archived')], default='draft', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('published_at', models.DateTimeField(blank=True, help_text='When the blog was published', null=True)),
                ('meta_description', models.CharField(blank=True, help_text='SEO meta description', max_length=160)),
                ('read_time', models.PositiveIntegerField(default=0, help_text='Estimated read time in minutes')),
                ('view_count', models.PositiveIntegerField(default=0, help_text='Number of views')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='blogs', to='accounts.teacherprofile')),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='blogs', to='blogs.blogcategory')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='BlogView',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('viewer_ip', models.GenericIPAddressField(help_text='IP address of the viewer')),
                ('user_agent', models.TextField(blank=True, help_text='Browser user agent')),
                ('viewed_at', models.DateTimeField(auto_now_add=True)),
                ('blog', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='views', to='blogs.blog')),
            ],
            options={
                'ordering': ['-viewed_at'],
            },
        ),
        migrations.AddIndex(
            model_name='blog',
            index=models.Index(fields=['author', '-created_at'], name='blogs_blog_author__b0902b_idx'),
        ),
        migrations.AddIndex(
            model_name='blog',
            index=models.Index(fields=['status', '-published_at'], name='blogs_blog_status_2b4687_idx'),
        ),
        migrations.AddIndex(
            model_name='blog',
            index=models.Index(fields=['category', '-created_at'], name='blogs_blog_categor_e4c63b_idx'),
        ),
        migrations.AddIndex(
            model_name='blog',
            index=models.Index(fields=['slug'], name='blogs_blog_slug_d0bba8_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='blogview',
            unique_together={('blog', 'viewer_ip')},
        ),
    ]
