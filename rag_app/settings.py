"""
Django settings for rag_app project.
Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from dotenv import load_dotenv
load_dotenv()

import os
from pathlib import Path
from datetime import timedelta
import dj_database_url

# Zoom API settings (Server-to-Server OAuth)
ZOOM_ACCOUNT_ID = os.getenv('ZOOM_ACCOUNT_ID', '')
ZOOM_CLIENT_ID = os.getenv('ZOOM_CLIENT_ID', '')
ZOOM_CLIENT_SECRET = os.getenv('ZOOM_CLIENT_SECRET', '')

# Build paths inside the project like this: BASE_DIR / 'subdir'. Changes
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-ye6#tdjmntfyt=+^&6hiy6xx@8j1n-v%x!$_sy3bz3qoaxd%yf'
SUPABASE_URL = os.getenv("SUPABASE_URL", "")
SUPABASE_KEY = os.getenv('SUPABASE_KEY', '')
SUPABASE_ANON_KEY = os.getenv("SUPABASE_ANON_KEY", "")
SUPABASE_SERVICE_ROLE_KEY = os.getenv("SUPABASE_SERVICE_ROLE_KEY", "")
BASE_URL_RESET_PASSWORD=os.getenv("BASE_URL_RESET_PASSWORD", "")
BASE_URL_SIGNIN=os.getenv("BASE_URL_SIGNIN", "")
BASE_URL = os.getenv("BASE_URL", "")
AUTH_USER_MODEL = "core.User"

# Google OAuth Configuration
GOOGLE_OAUTH_CLIENT_ID = os.getenv("GOOGLE_OAUTH_CLIENT_ID", "")
GOOGLE_OAUTH_CLIENT_SECRET = os.getenv("GOOGLE_OAUTH_CLIENT_SECRET", "")
GOOGLE_OAUTH_REDIRECT_URI = os.getenv("GOOGLE_OAUTH_REDIRECT_URI", "")

GEMINI_API_KEY = os.getenv("GEMINI_API_KEY", "")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "")

STRIPE_SECRET_KEY = os.getenv("STRIPE_SECRET_KEY", "")
STRIPE_PUBLISHABLE_KEY = os.getenv("STRIPE_PUBLISHABLE_KEY", "")
STRIPE_WEBHOOK_SECRET = os.getenv("STRIPE_WEBHOOK_SECRET", "")

# Frontend URL for payment returns
FRONTEND_URL = os.getenv("FRONTEND_URL", "http://localhost:3000")

RESEND_API_KEY = os.getenv("RESEND_API_KEY", "")


url = os.getenv("SUPABASE_DB_URL", "").strip()

if not url:
    raise RuntimeError("SUPABASE_DB_URL is not set. Put it in your .env")


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["192.168.1.2","localhost", "127.0.0.1","api.shaktiwheel.in"]
#CSRF_TRUSTED_ORIGINS = ["http://192.168.10.9:8000"]


CORS_ALLOWED_ORIGINS = [
    "http://192.168.10.9:3000",   # client laptop origin (React/Vite/etc)
    "https://api.shaktiwheel.in",
    "http://localhost:3000",
    'https://linguaflex-eight.vercel.app'
]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'core',
    'bookings',
    'accounts',
    'blogs',  
    'campaigns',
    'stripe_payments',
    "corsheaders",
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",   # put it at the very top
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'rag_app.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'rag_app.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.getenv("SUPABASE_DBNAME"),
        "USER": os.getenv("SUPABASE_USER"),
        "PASSWORD": os.getenv("SUPABASE_PASSWORD"),
        "HOST": os.getenv("SUPABASE_HOST"),
        "PORT": os.getenv("SUPABASE_PORT"),
        "OPTIONS": {"sslmode": "require"},
    }
    # "default": dj_database_url.parse(url, conn_max_age=600, ssl_require=True)
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# REST_FRAMEWORK = {
#     'DEFAULT_AUTHENTICATION_CLASSES': (
#         'rest_framework_simplejwt.authentication.JWTAuthentication',
#     ),
#     'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
# }

# Remove or comment out any SimpleJWT settings and authentication classes

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "core.authentication.SupabaseTokenAuthentication",
    ],
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',

}

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',  # For Django admin login
    "core.authentication.SupabaseBackend",        # For API token authentication
]

SIMPLE_JWT = {
    "AUTH_HEADER_TYPES": ("Bearer",),
    'ACCESS_TOKEN_LIFETIME': timedelta(hours=24),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=30),
}


# =============================================================================
# STRIPE PAYMENT SETTINGS
# =============================================================================

# Stripe API Keys (get these from your Stripe dashboard)
STRIPE_PUBLISHABLE_KEY = os.getenv('STRIPE_PUBLISHABLE_KEY', '')
STRIPE_SECRET_KEY = os.getenv('STRIPE_SECRET_KEY', '')
STRIPE_WEBHOOK_SECRET = os.getenv('STRIPE_WEBHOOK_SECRET', '')

# Stripe settings
STRIPE_LIVE_MODE = False  # Set to True in production
STRIPE_TEST_SECRET_KEY = os.getenv('STRIPE_TEST_SECRET_KEY', '')
STRIPE_TEST_PUBLISHABLE_KEY = os.getenv('STRIPE_TEST_PUBLISHABLE_KEY', '')

# Payment settings
PAYMENT_CURRENCY = 'USD'
PLATFORM_FEE_PERCENTAGE = 0.05  # 5% platform fee
MINIMUM_PLATFORM_FEE_CENTS = 100  # $1 minimum fee

# Email settings for payment notifications
PAYMENT_EMAIL_NOTIFICATIONS = True
